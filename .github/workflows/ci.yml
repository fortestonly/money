name: App CI

on:
  push:

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Set app version
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - run: echo "Release ${{ env.VERSION }}"
      - uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          draft: true
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          body: |
            * [Web Wallet](https://coin.space/wallet/)

            * [Tor Wallet](http://coinspacezp5mmyuicbz2hoafbnduj4vzkttq3grn5mnwdue5t343zid.onion/)

            * [iOS Application](https://apps.apple.com/us/app/coinspace-bitcoin-wallet/id980719434#?platform=iphone)

            * [Android Application](https://play.google.com/store/apps/details?id=com.coinspace.app)

            * [Galaxy Store](https://galaxy.store/coinapp)

            * [Windows Installer: Coin.Wallet.Setup.exe](https://github.com/CoinSpace/CoinSpace/releases/download/${{ env.VERSION }}/Coin.Wallet.Setup.exe)

            * [macOS Installer: Coin.Wallet.dmg](https://github.com/CoinSpace/CoinSpace/releases/download/${{ env.VERSION }}/Coin.Wallet.dmg)

            * [Microsoft Store](https://www.microsoft.com/store/apps/9NBLGGH5PXJQ)

            * [Mac App Store](https://apps.apple.com/us/app/coin-bitcoin-wallet/id980719434#?platform=mac)

            * [Linux Snap](https://snapcraft.io/coin)
  build:
    #environment: production
    needs: release
    environment: ${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          #- os: macos-10.15
          #  node: 14
          #  DISTRIBUTION: mac
          #  BUILD_TYPE: electron
          #- os: windows-2019
          #  node: 14
          #  DISTRIBUTION: win
          #  BUILD_TYPE: electron
          #- os: windows-2019
          #  node: 14
          #  DISTRIBUTION: appx
          #  BUILD_TYPE: electron
          - os: ubuntu-20.04
            node: 18
            DISTRIBUTION: snap
            BUILD_TYPE: electron
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          # for @electron-forge/maker-dmg@6.0.0-beta.54
          python-version: '3.10'
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - run: npm ci
        env:
          NODE_ENV: ci
      - name: Install Snapcraft
        if: ${{ matrix.DISTRIBUTION == 'snap' }}
        uses: samuelmeuli/action-snapcraft@v2
        #env:
        #  SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_TOKEN }}
      - name: Install certificates & login
        env:
          DISTRIBUTION: ${{ matrix.DISTRIBUTION }}
          BUILD_TYPE: ${{ matrix.BUILD_TYPE }}
          CERTIFICATE_MAC: ${{ secrets.CERTIFICATE_MAC }}
          CERTIFICATE_MAC_PASSWORD: ${{ secrets.CERTIFICATE_MAC_PASSWORD }}
          PROVISIONING_DISTRIBUTION: ${{ secrets.PROVISIONING_DISTRIBUTION }}
          PROVISIONING_DEVELOPMENT: ${{ secrets.PROVISIONING_DEVELOPMENT }}
          CERTIFICATE_WIN: ${{ secrets.CERTIFICATE_WIN }}
        shell: bash
        run: |
          echo "DISTRIBUTION"
          echo ${{ matrix.DISTRIBUTION }}
          echo "CERTIFICATE_MAC_PASSWORD"
          echo ${{ secrets.CERTIFICATE_MAC_PASSWORD }}
          if [[ "$DISTRIBUTION" == "mac" || "$DISTRIBUTION" == "mas" || "$DISTRIBUTION" == "mas-dev" ]]; then
            echo $CERTIFICATE_MAC | base64 --decode > certificate.p12;
            security create-keychain -p travis build.keychain;
            security default-keychain -s build.keychain;
            security unlock-keychain -p travis build.keychain;
            security set-keychain-settings build.keychain;
            security list-keychains -d user -s build.keychain;
            security import certificate.p12 -k build.keychain -P $CERTIFICATE_MAC_PASSWORD -T /usr/bin/codesign -T /usr/bin/productbuild 2>&1 >/dev/null;
            security set-key-partition-list -S apple-tool:,apple: -s -k travis build.keychain 2>&1 >/dev/null;
            rm certificate.p12;
            if [[ "$DISTRIBUTION" == "mas" ]]; then
              echo $PROVISIONING_DISTRIBUTION | base64 --decode > electron/embedded.provisionprofile;
            fi
            if [[ "$DISTRIBUTION" == "mas-dev" ]]; then
              echo $PROVISIONING_DEVELOPMENT | base64 --decode > electron/embedded.provisionprofile;
            fi
          elif [[ "$DISTRIBUTION" == "ios" ]]; then
            echo $CERTIFICATE_DISTRIBUTION | base64 --decode > certificate.p12;
            security create-keychain -p travis build.keychain;
            security default-keychain -s build.keychain;
            security unlock-keychain -p travis build.keychain;
            security set-keychain-settings build.keychain;
            security list-keychains -d user -s build.keychain;
            security import certificate.p12 -k build.keychain -P $CERTIFICATE_DISTRIBUTION_PASSWORD -T /usr/bin/codesign -T /usr/bin/productbuild 2>&1 >/dev/null;
            security set-key-partition-list -S apple-tool:,apple: -s -k travis build.keychain 2>&1 >/dev/null;
            rm certificate.p12;
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
            echo $PROVISIONING_IOS | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/com.coinspace.wallet.mobileprovision;
            echo $PROVISIONING_IOS_WATCH_APP | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/com.coinspace.wallet.watchapp.mobileprovision;
            echo $PROVISIONING_IOS_WATCH_APP_EXTENSION | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/com.coinspace.wallet.watchapp.extension.mobileprovision;
          elif [[ "$DISTRIBUTION" == "android-play" || "$DISTRIBUTION" == "android-galaxy" ]]; then
            echo $ANDROID_RELEASE_KEYSTORE | base64 --decode > phonegap/release.keystore;
          elif [[ "$DISTRIBUTION" == "win" || "$DISTRIBUTION" == "appx" ]]; then
            echo $CERTIFICATE_WIN | base64 --decode > resources/certificate.pfx
          fi
      - name: Build app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISTRIBUTION: ${{ matrix.DISTRIBUTION }}
          BUILD_TYPE: ${{ matrix.BUILD_TYPE }}
          CERTIFICATE_WIN_PASSWORD: ${{ secrets.CERTIFICATE_WIN_PASSWORD }}
          DEBUG: electron-windows-store,electron-forge:*,electron-packager
          APPX_PUBLISHER: ${{ secrets.APPX_PUBLISHER }}
        shell: bash
        run: |
          node --version
          node build.js
